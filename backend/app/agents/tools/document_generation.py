import base64
import io
import json
import logging
from typing import Any, Dict, List, Optional

from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.enum.text import PP_ALIGN
from pptx.dml.color import RGBColor
from docx import Document
from docx.shared import Inches as DocxInches
from docx.enum.text import WD_ALIGN_PARAGRAPH
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, PatternFill
from openpyxl.utils import get_column_letter

from app.agents.tools.agent_tool import AgentTool, ToolFunctionResult
from app.repositories.models.conversation import DocumentToolResultModel
from app.repositories.models.custom_bot import BotModel
from app.routes.schemas.conversation import type_model_name
from pydantic import BaseModel, Field

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)


class PowerPointGenerationArgs(BaseModel):
    title: str = Field(description="Title of the presentation")
    slides: List[Dict[str, Any]] = Field(
        description="List of slides, each containing 'title' and 'content' or 'bullet_points'"
    )
    theme_color: Optional[str] = Field(
        default="blue", description="Theme color for the presentation (blue, red, green, purple)"
    )


class WordDocumentGenerationArgs(BaseModel):
    title: str = Field(description="Title of the document")
    content: List[Dict[str, Any]] = Field(
        description="List of content sections, each containing 'type' (heading, paragraph, bullet_list) and 'text' or 'items'"
    )
    font_size: Optional[int] = Field(default=12, description="Base font size for the document")


class ExcelSpreadsheetGenerationArgs(BaseModel):
    title: str = Field(description="Title/name of the spreadsheet")
    sheets: List[Dict[str, Any]] = Field(
        description="List of sheets, each containing 'name', 'headers', and 'data'"
    )
    include_charts: Optional[bool] = Field(
        default=False, description="Whether to include basic charts"
    )


def generate_powerpoint(
    args: PowerPointGenerationArgs,
    bot: BotModel | None = None,
    model: type_model_name | None = None,
) -> ToolFunctionResult:
    """Generate a PowerPoint presentation based on the provided content."""
    try:
        # Create presentation
        prs = Presentation()
        
        # Define theme colors
        theme_colors = {
            "blue": RGBColor(0, 112, 192),
            "red": RGBColor(192, 0, 0),
            "green": RGBColor(0, 176, 80),
            "purple": RGBColor(112, 48, 160),
        }
        theme_color = theme_colors.get(args.theme_color, theme_colors["blue"])
        
        # Title slide
        title_slide_layout = prs.slide_layouts[0]
        slide = prs.slides.add_slide(title_slide_layout)
        title = slide.shapes.title
        subtitle = slide.placeholders[1]
        
        title.text = args.title
        subtitle.text = f"Generated by Bedrock Chat\n{len(args.slides)} slides"
        
        # Style title
        title.text_frame.paragraphs[0].font.color.rgb = theme_color
        title.text_frame.paragraphs[0].font.size = Pt(44)
        
        # Content slides
        for slide_data in args.slides:
            slide_layout = prs.slide_layouts[1]  # Title and Content layout
            slide = prs.slides.add_slide(slide_layout)
            
            # Set slide title
            slide.shapes.title.text = slide_data.get("title", "Slide Title")
            slide.shapes.title.text_frame.paragraphs[0].font.color.rgb = theme_color
            
            # Add content
            content_placeholder = slide.placeholders[1]
            text_frame = content_placeholder.text_frame
            text_frame.clear()
            
            if "bullet_points" in slide_data:
                # Add bullet points
                for i, point in enumerate(slide_data["bullet_points"]):
                    if i == 0:
                        p = text_frame.paragraphs[0]
                    else:
                        p = text_frame.add_paragraph()
                    p.text = str(point)
                    p.level = 0
                    p.font.size = Pt(18)
            elif "content" in slide_data:
                # Add paragraph content
                p = text_frame.paragraphs[0]
                p.text = str(slide_data["content"])
                p.font.size = Pt(18)
        
        # Save to bytes
        ppt_buffer = io.BytesIO()
        prs.save(ppt_buffer)
        ppt_buffer.seek(0)
        
        # Encode to base64
        ppt_base64 = base64.b64encode(ppt_buffer.getvalue()).decode('utf-8')
        
        return DocumentToolResultModel(
            format="pptx",
            name=f"{args.title.replace(' ', '_')}.pptx",
            document=ppt_base64.encode('utf-8'),
        )
        
    except Exception as e:
        logger.error(f"Error generating PowerPoint: {str(e)}")
        return f"Error generating PowerPoint presentation: {str(e)}"


def generate_word_document(
    args: WordDocumentGenerationArgs,
    bot: BotModel | None = None,
    model: type_model_name | None = None,
) -> ToolFunctionResult:
    """Generate a Word document based on the provided content."""
    try:
        # Create document
        doc = Document()
        
        # Add title
        title = doc.add_heading(args.title, 0)
        title.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # Add content sections
        for section in args.content:
            section_type = section.get("type", "paragraph")
            
            if section_type == "heading":
                level = section.get("level", 1)
                doc.add_heading(section.get("text", ""), level)
                
            elif section_type == "paragraph":
                paragraph = doc.add_paragraph(section.get("text", ""))
                paragraph.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
                
            elif section_type == "bullet_list":
                items = section.get("items", [])
                for item in items:
                    doc.add_paragraph(str(item), style='List Bullet')
                    
            elif section_type == "numbered_list":
                items = section.get("items", [])
                for item in items:
                    doc.add_paragraph(str(item), style='List Number')
        
        # Save to bytes
        doc_buffer = io.BytesIO()
        doc.save(doc_buffer)
        doc_buffer.seek(0)
        
        # Encode to base64
        doc_base64 = base64.b64encode(doc_buffer.getvalue()).decode('utf-8')
        
        return DocumentToolResultModel(
            format="docx",
            name=f"{args.title.replace(' ', '_')}.docx",
            document=doc_base64.encode('utf-8'),
        )
        
    except Exception as e:
        logger.error(f"Error generating Word document: {str(e)}")
        return f"Error generating Word document: {str(e)}"


def generate_excel_spreadsheet(
    args: ExcelSpreadsheetGenerationArgs,
    bot: BotModel | None = None,
    model: type_model_name | None = None,
) -> ToolFunctionResult:
    """Generate an Excel spreadsheet based on the provided data."""
    try:
        # Create workbook
        wb = Workbook()
        
        # Remove default sheet
        wb.remove(wb.active)
        
        # Create sheets
        for sheet_data in args.sheets:
            sheet_name = sheet_data.get("name", "Sheet1")
            ws = wb.create_sheet(title=sheet_name)
            
            # Add headers
            headers = sheet_data.get("headers", [])
            if headers:
                for col, header in enumerate(headers, 1):
                    cell = ws.cell(row=1, column=col, value=str(header))
                    cell.font = Font(bold=True, color="FFFFFF")
                    cell.fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
                    cell.alignment = Alignment(horizontal="center")
            
            # Add data
            data = sheet_data.get("data", [])
            for row_idx, row_data in enumerate(data, 2):  # Start from row 2
                if isinstance(row_data, list):
                    for col_idx, cell_value in enumerate(row_data, 1):
                        ws.cell(row=row_idx, column=col_idx, value=cell_value)
                elif isinstance(row_data, dict):
                    for col_idx, header in enumerate(headers, 1):
                        value = row_data.get(header, "")
                        ws.cell(row=row_idx, column=col_idx, value=value)
            
            # Auto-adjust column widths
            for column in ws.columns:
                max_length = 0
                column_letter = get_column_letter(column[0].column)
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = min(max_length + 2, 50)
                ws.column_dimensions[column_letter].width = adjusted_width
        
        # Save to bytes
        excel_buffer = io.BytesIO()
        wb.save(excel_buffer)
        excel_buffer.seek(0)
        
        # Encode to base64
        excel_base64 = base64.b64encode(excel_buffer.getvalue()).decode('utf-8')
        
        return DocumentToolResultModel(
            format="xlsx",
            name=f"{args.title.replace(' ', '_')}.xlsx",
            document=excel_base64.encode('utf-8'),
        )
        
    except Exception as e:
        logger.error(f"Error generating Excel spreadsheet: {str(e)}")
        return f"Error generating Excel spreadsheet: {str(e)}"


# Create the agent tools
powerpoint_generation_tool = AgentTool(
    name="generate_powerpoint",
    description="Generate a PowerPoint presentation with multiple slides containing titles, content, and bullet points. Useful for creating presentations, reports, or structured content.",
    args_schema=PowerPointGenerationArgs,
    function=generate_powerpoint,
)

word_document_generation_tool = AgentTool(
    name="generate_word_document",
    description="Generate a Word document with formatted text, headings, paragraphs, and lists. Useful for creating reports, documentation, or structured text documents.",
    args_schema=WordDocumentGenerationArgs,
    function=generate_word_document,
)

excel_spreadsheet_generation_tool = AgentTool(
    name="generate_excel_spreadsheet",
    description="Generate an Excel spreadsheet with multiple sheets, headers, and data. Useful for creating data tables, reports, or structured data analysis.",
    args_schema=ExcelSpreadsheetGenerationArgs,
    function=generate_excel_spreadsheet,
)